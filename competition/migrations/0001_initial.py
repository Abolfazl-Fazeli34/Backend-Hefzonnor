# Generated by Django 5.2.3 on 2025-10-24 04:48

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('order', models.PositiveSmallIntegerField()),
                ('promote_rate', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MaxValueValidator(0.99), django.core.validators.MinValueValidator(0.01)])),
                ('demote_rate', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MaxValueValidator(0.99), django.core.validators.MinValueValidator(0.01)])),
                ('promotion_minimum_score', models.PositiveIntegerField()),
                ('demotion_penalty', models.PositiveIntegerField()),
                ('target_division_size', models.PositiveIntegerField()),
                ('max_division_size', models.PositiveIntegerField()),
                ('min_division_size', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('year', models.IntegerField()),
                ('week_number', models.IntegerField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('passed', 'گذشته'), ('active', 'فعال'), ('upcoming', 'آینده')], default='upcoming', max_length=20)),
            ],
            options={
                'unique_together': {('year', 'week_number')},
            },
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('size', models.PositiveIntegerField()),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='competition.league')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='competition.week')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DivisionMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weekly_score', models.PositiveIntegerField(default=0)),
                ('rank_in_division', models.PositiveIntegerField(null=True)),
                ('promotion_status', models.CharField(choices=[('promoted', 'ارتقا یافته'), ('demoted', 'تنزل یافته'), ('stayed', 'مانده')], max_length=20, null=True)),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='memberships', to='competition.division')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_division_memberships', to='account.profile')),
            ],
            options={
                'unique_together': {('user', 'division')},
            },
        ),
    ]
